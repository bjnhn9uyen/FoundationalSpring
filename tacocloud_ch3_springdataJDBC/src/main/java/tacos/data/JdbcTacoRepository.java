package tacos.data;

import java.sql.Timestamp;
import java.sql.Types;
import java.util.Arrays;
import java.util.Date;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.PreparedStatementCreator;
import org.springframework.jdbc.core.PreparedStatementCreatorFactory;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.jdbc.support.KeyHolder;
import org.springframework.stereotype.Repository;

import tacos.Ingredient;
import tacos.Taco;

@Repository
public class JdbcTacoRepository implements TacoRepository {

	private JdbcTemplate jdbc;

	// inject JdbcTemplate via the @Autowired annotation
	@Autowired
	public JdbcTacoRepository(JdbcTemplate jdbc) {
		this.jdbc = jdbc;
	}

	@Override
	public Taco save(Taco taco) {
		// save Taco design object into Taco table and return the latest inserted Taco id,
		long tacoId = saveTacoDesign(taco);

		// the latest inserted Taco id is used for saving into the Taco_Ingredients table
		taco.setId(tacoId);
		for (Ingredient ingredient : taco.getIngredients()) {
			// save each ingredient in the list into the Taco_Ingredients table
			saveIngredientToTaco(ingredient, tacoId);
		}

		return taco;
	}

	private long saveTacoDesign(Taco taco) {
		taco.setCreatedAt(new Date());

		// When inserting a row into Taco table, we need to know the id generated by the database,
		// we use PreparedStatementCreator along with KeyHolder to provide the generated Taco id
		PreparedStatementCreatorFactory pscf = new PreparedStatementCreatorFactory(
								"insert into Taco (name, createdAt) values (?, ?)", Types.VARCHAR,
								Types.TIMESTAMP);
		pscf.setReturnGeneratedKeys(true);
		PreparedStatementCreator psc = pscf.newPreparedStatementCreator(
								Arrays.asList(taco.getName(), new Timestamp(taco.getCreatedAt().getTime())));
		KeyHolder keyHolder = new GeneratedKeyHolder();
		jdbc.update(psc, keyHolder);
		return keyHolder.getKey().longValue();
	}

	private void saveIngredientToTaco(Ingredient ingredient, long tacoId) {
		jdbc.update("insert into Taco_Ingredients (taco, ingredient) " + "values (?, ?)",
								tacoId,
								ingredient.getId());
	}

}
